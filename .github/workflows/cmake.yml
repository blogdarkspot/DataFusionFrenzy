name: Build Main

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

env:
  # Customize the CMake build type here (Release, Debug, RelWithDebInfo, etc.)
  BUILD_TYPE: Release

jobs:
  build:
    # The CMake configure and build commands are platform agnostic and should work equally well on Windows or Mac.
    # You can convert this to a matrix build if you need cross-platform coverage.
    # See: https://docs.github.com/en/free-pro-team@latest/actions/learn-github-actions/managing-complex-workflows#using-a-build-matrix
    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v3
      with:
        submodules: true
        

    # Update references
    - name: Git Sumbodule Update
      run: |
        git pull --recurse-submodules
        git submodule update --remote --recursive
        
    - name: Install dependency
      run: sudo apt-get -y install lcov gcovr

    - name: Configure CMake
      # Configure CMake in a 'build' subdirectory. `CMAKE_BUILD_TYPE` is only required if you are using a single-configuration generator such as make.
      # See https://cmake.org/cmake/help/latest/variable/CMAKE_BUILD_TYPE.html?highlight=cmake_build_type
      run: cmake -B ${{github.workspace}}/build -DCMAKE_BUILD_TYPE=${{env.BUILD_TYPE}}
      

    - name: Build
      # Build your program with the given configuration
      run: cmake --build ${{github.workspace}}/build --config ${{env.BUILD_TYPE}}

    - name: Test
      working-directory: ${{github.workspace}}/build
      # Execute tests defined by the CMake configuration.  
      # See https://cmake.org/cmake/help/latest/manual/ctest.1.html for more detail
      run: ctest -R ConflationTest --output-junit testout.xml
      
    - name: Report
      uses: dorny/test-reporter@v1
      if: always()
      with:
        name: Google Tests
        path: ${{github.workspace}}/build/testout.xml
        reporter: java-junit
        fail-on-error: true
      
    - name: Publish Test Results
      uses: EnricoMi/publish-unit-test-result-action@v2
      if: always()
      with:
        junit_files: ${{github.workspace}}/build/testout.xml
 
    - name: Set badge color
      shell: bash
      run: |
        case ${{ fromJSON( steps.test-results.outputs.json ).conclusion }} in
        success)
          echo "BADGE_COLOR=31c653" >> $GITHUB_ENV
          ;;
        failure)
          echo "BADGE_COLOR=800000" >> $GITHUB_ENV
          ;;
        neutral)
          echo "BADGE_COLOR=696969" >> $GITHUB_ENV
          ;;
        esac

    - name: Create badge
      uses: emibcn/badge-action@d6f51ff11b5c3382b3b88689ae2d6db22d9737d1
      with:
       label: Tests
       status: '${{ fromJSON( steps.test-results.outputs.json ).formatted.stats.tests }} tests, ${{ fromJSON( steps.test-results.outputs.json ).formatted.stats.runs }} runs: ${{ fromJSON( steps.test-results.outputs.json ).conclusion }}'
       color: ${{ env.BADGE_COLOR }}
       path: badge.svg

    - name: Upload badge to Gist
     # Upload only for master branch
    if: >
      github.event_name == 'workflow_run' && github.event.workflow_run.head_branch == 'master' ||
      github.event_name != 'workflow_run' && github.ref == 'refs/heads/master'
      uses: andymckay/append-gist-action@1fbfbbce708a39bd45846f0955ed5521f2099c6d
      with:
       token: ${{ secrets.GIST_TOKEN }}
       gistURL: https://gist.github.com/blogdarkspot/bcd5ddc7bae78563f7ac89677f42f7aa
       file: badge.svg
      
